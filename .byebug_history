continue
ReservedRoom.where(location_id: @location_id,room_id: room_id,date: date,order_id: 0,room_type: AvailableRoom::Type::DORM).first_or_create!
room_id
ReservedRoom.all
ReservedRoom
room_capacity
continue
ReservedRoom.first.id
ReservedRoom.first
ReservedDormRoom.first.reserved_room_id
ReservedDormRoom.first.order_id
ReservedDormRoom.first
ReservedDormRoom.count
continue
ReservedRoom.all.map(&:date)
ReservedRoom.all.map(&:room_id)
@end_date
@start_date
ReservedRoom.count
ReservedRoom.all
ReservedRoom
next
room_capacity
total_rooms
next
step
next
step
continue
date
next
room
next
room
next
value
room_id
step
room_capacity
continue
ReservedRoom.all
ReservedRoom
ReservedRoom.count == 2
result
next
Date.parse(@end_date)
Date.parse(@start_date)
room_capacity
total_rooms.size
total_rooms
continue
ReservedRoom.all.size
continue
Location.first.orders.size
Location.first.orders
Order.first.reserved_rooms.count
Order.first.reserved_rooms.size
Order.first.reserved_rooms
Order.first
Order.count
Order.size
Order.all.size
ReservedRoom.all.size
continue
Order.all.first.id
Order.all.first
ReservedRoom.all.map(&:order_id).uniq.first
ReservedRoom.all.map(&:order_id).uniq
ReservedRoom.all.map(&:order_id)
ReservedRoom.all
ReservedRoom.all.size == 3
continue
response
result
continue
Location.all.map(&:country).sort.first
Location.all.map(&:country).sort
Location.all.map(&:country)
Location.all.select(&:country)
Location.all
JSON.parse(response.body)['data'].first['country']
JSON.parse(response.body)['data'].first
continue
@locations.sort_by{|loc| loc[:country]}
@locations.sort_by!{|loc| loc[:country]}
@locations
continue
ReservedRoom.last.guests_amount == 1
ReservedRoom.last.guests_amount == 2
ReservedRoom.first.guests_amount == 2
ReservedRoom.first
ReservedRoom.all
Order.all.size
Order.all
ReservedRoom.all.size
continue
e
next
order.id
date
room_id
ReservedRoom.all.size
ReservedRoom.all.count
ReservedRoom.all
continue
date
continue
date
ReservedRoom.all
continue
ReservedRoom.all
continue
where
whereami
caller
stacktrace
stack
continue
ReservedRoom.all.size
ReservedRoom.all
ReservedRoom.size
next
step
Date.parse(@end_date)
Date.parse(@start_date)
next
dates
next
reservations
next
total_rooms
next
step
continue
reservations
continue
params[:test]
params
continue
Location.last.id
Location.last
JSON.parse(response.body)['data']
continue
JSON.parse(response.body)['data'].size == 1
continue
JSON.parse(response.body)['data'].size
JSON.parse(response.body)['data']
JSON.parse(response.body)
continue
JSON.parse(response.body)['data']
JSON.parse(response.body).['data']
JSON.parse(response.body).size
JSON.parse(response.body)
continue
next
continue
JSON.parse(response.body).size
JSON.parse(response.body)
continue
@filter_by_country
@locations
next
@order_by_country
@locations
continue
Location.all.count
Location.all
Location
response.body
response
continue
total_quantity_per_night
dates
next
continue
dates.key?(reservations.first.date.strftime("%Y-%m-%d"))
reservations.first.date.strftime("%Y-%m-%d")
reservations.first
reservations
res
dates.key?
dates.key
dates
dates.key?
dates
dates.has
dates
ReservedRoom.where(date: Date.parse(start_date)..end_date)
ReservedRoom.where(date: start_date..end_date)
Date.parse(end_date)
ReservedRoom.where(date: start_date..(end_date-1.day))
ReservedRoom.where(date: start_date..end_date-1.day)
ReservedRoom.where(date: start_date..end_date-1)
ReservedRoom.where(date: start_date..end_date)
end_date
start_date
ReservedRoom.where(date: start_date..end_date)
reservations
dates
continue
next
reservations
dates
continue
ReservedRoom.count
ReservedRoom.all
ReservedRoom
continue
e
next
ReservedRoom.all
next
room.guests_amount < value
room
next
ReservedRoom.all
order.id
date
AvailableRoom.where(room_id: 61)
AvailableRoom.all
AvailableRoom
value
room_id
step
room_capacity
continue
room_id
next
exit
e
next
room_capacity
continue
e
next
order
next
AvailabilityHelper.search_for_vacant_dorm_rooms(@location_id, @start_date, @end_date)
next
room_capacity
continue
JSON.parse(JSON.parse(response.body)['data']).last['name']
JSON.parse(JSON.parse(response.body)['data']).first['name']
JSON.parse(JSON.parse(response.body)['data']).first.name
JSON.parse(JSON.parse(response.body)['data']).first
JSON.parse(JSON.parse(response.body)['data'])
JSON.parse(JSON.parse(response.body)['data']).first
JSON.parse(JSON.parse(response.body)['data'])
continue
JSON.parse(JSON.parse(response.body)['data'])
continue
JSON.parse(JSON.parse(response.body)['data']).size
JSON.parse(JSON.parse(response.body)['data'])
JSON.parse(response.body)['data']
JSON.parse(response.body)['data'].first
JSON.parse(response.body)['data']
